# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.gql' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'Graql' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'gql',
  'graql'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [
  { include: '#comment' }
  {
    # define and undefine blocks
    begin: '\\b(?:(define)|(undefine))\\b'
    beginCaptures:
      1: name: 'keyword.control.define.graql'
      2: name: 'keyword.control.undefine.graql'
    end: '''(?x)
        (?=
          \\binsert\\b |
          \\bdefine\\b |
          \\bundefine\\b |
          \\bmatch\\b |
          \\bget\\b
        )
      '''
    name: 'meta.define.graql'
    patterns: [
      { include: '#comment' }
      {
        # concept declaration
        begin: '\\b[a-zA-Z0-9\\-_]+\\b'
        beginCaptures:
          0: name: 'entity.type.name.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.concept.graql'
        patterns: [
          { include: '#comment' }
          {
            # ... sub <concept> [,]? ...
            begin: '\\bsub\\b'
            beginCaptures:
              0: name: 'keyword.control.sub.graql'
            end: '''(?x)
              (?=
                \\bsub\\b |
                \\bplays\\b |
                \\brelates\\b |
                \\bhas\\b |
                \\bkey\\b |
                \\bid\\b |
                \\bdatatype\\b |
                \\bregex\\b |
                \\bis-abstract\\b |
                \\blabel\\b |
                \\bwhen\\b |
                \\bthen\\b |
                ;
              ) |
              (,)
            '''
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.sub.graql'
            patterns: [
              { include: '#comment' }
              { include: '#identifier_build_in' }
              { include: '#identifier' }
            ]
          }
          {
            # ... plays <role> [,]? ...
            # ... has <attribute> [,]? ...
            # ... relates <role> [,]? ...
            # ... key <key> [,]? ...
            begin: '\\b(?:(plays)|(has)|(relates)|(key))\\b'
            beginCaptures:
              1: name: 'keyword.control.plays.graql'
              2: name: 'keyword.control.has.graql'
              3: name: 'keyword.control.relates.graql'
              4: name: 'keyword.control.key.graql'
            end: '''(?x)
              (?=
                \\bsub\\b |
                \\bplays\\b |
                \\brelates\\b |
                \\bhas\\b |
                \\bkey\\b |
                \\bid\\b |
                \\bdatatype\\b |
                \\bregex\\b |
                \\bis-abstract\\b |
                \\blabel\\b |
                \\bwhen\\b |
                \\bthen\\b |
                ;
              ) |
              (,)
            '''
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.attribute.graql'
            patterns: [
              { include: '#comment' }
              { include: '#identifier' }
            ]
          }
          {
            # ... id <string> [,]? ...
            # ... label <string> [,]? ...
            begin: '\\b(?:(label)|(id))\\b'
            beginCaptures:
              1: name: 'keyword.control.label.graql'
              2: name: 'keyword.control.id.graql'
            end: '''(?x)
              (?=
                \\bsub\\b |
                \\bplays\\b |
                \\brelates\\b |
                \\bhas\\b |
                \\bkey\\b |
                \\bid\\b |
                \\bdatatype\\b |
                \\bregex\\b |
                \\bis-abstract\\b |
                \\blabel\\b |
                \\bwhen\\b |
                \\bthen\\b |
                ;
              ) |
              (,)
            '''
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.label.graql'
            patterns: [
              { include: '#comment' }
              { include: '#string' }
            ]
          }
          {
            # ... regex <regex> [,]? ...
            begin: '\\bregex\\b'
            beginCaptures:
              0: name: 'keyword.control.regexp.graql'
            end: '''(?x)
              (?=
                \\bsub\\b |
                \\bplays\\b |
                \\brelates\\b |
                \\bhas\\b |
                \\bkey\\b |
                \\bid\\b |
                \\bdatatype\\b |
                \\bregex\\b |
                \\bis-abstract\\b |
                \\blabel\\b |
                \\bwhen\\b |
                \\bthen\\b |
                ;
              ) |
              (,)
            '''
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.regexp.graql'
            patterns: [
              { include: '#comment' }
              { include: '#regexp' }
            ]
          }
          {
            # ... datatype (long|double|string|boolean|date) [,]? ...
            begin: '\\bdatatype\\b'
            beginCaptures:
              0: name: 'keyword.control.datatype.graql'
            end: '''(?x)
              (?=
                \\bsub\\b |
                \\bplays\\b |
                \\brelates\\b |
                \\bhas\\b |
                \\bkey\\b |
                \\bid\\b |
                \\bdatatype\\b |
                \\bregex\\b |
                \\bis-abstract\\b |
                \\blabel\\b |
                \\bwhen\\b |
                \\bthen\\b |
                ;
              ) |
              (,)
            '''
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.datatype.graql'
            patterns: [
              { include: '#comment' }
              { include: '#datatypes_build_in' }
              { include: '#identifier_illegal' }
            ]
          }
          {
            # ... is-abstract [,]? ...
            match: '\\b(is-abstract)\\b\\s*(\\,)?'
            captures:
              1: name: 'keyword.control.abstract.graql'
              2: name: 'punctuation.definition.separator.graql'
          }
          {
            # ... when { ... } ...
            begin: '\\bwhen\\b'
            beginCaptures:
              0: name: 'keyword.control.when.graql'
            end: '(?<=})'
            name: 'meta.rule.preconditions.graql'
            patterns: [
              {
                # ... { ... } ...
                begin: '{'
                beginCaptures:
                  0: name: 'punctuation.definition.preconditions.start.graql'
                end: '}'
                endCaptures:
                  0: name: 'punctuation.definition.preconditions.end.graql'
                name: 'meta.rule.preconditions.block.graql'
                patterns: [
                  { include: '#comment' }
                  { include: '#match_statement' }
                ]
              }
            ]
          }
          {
            # ... then { ... } ...
            begin: '\\bthen\\b'
            beginCaptures:
              0: name: 'keyword.control.then.graql'
            end: '(?<=})'
            name: 'meta.rule.postconditions.graql'
            patterns: [
              {
                # ... { ... } ...
                begin: '{'
                beginCaptures:
                  0: name: 'punctuation.definition.postconditions.start.graql'
                end: '}'
                endCaptures:
                  0: name: 'punctuation.definition.postconditions.end.graql'
                name: 'meta.rule.postconditions.block.graql'
                patterns: [
                  { include: '#comment' }
                  { include: '#insert_statement' }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
  {
    # insert block
    begin: '\\binsert\\b'
    beginCaptures:
      0: name: 'keyword.control.insert.graql'
    end: '(?=insert|define|undefine|match|get)'
    name: 'meta.insert.graql'
    patterns: [
      { include: '#comment' }
      { include: '#insert_statement' }
    ]
  }
  {
    # match block
    begin: '\\bmatch\\b'
    beginCaptures:
      0: name: 'keyword.control.insert.graql'
    end: '(?=insert|define|undefine|match|get)'
    name: 'meta.match.graql'
    patterns: [
      { include: '#comment' }
      { include: '#match_statement' }
    ]
  }
  {
    begin: '\\bget\\b'
    beginCaptures:
      0: name: 'keyword.control.get.graql'
    end: ';'
    name: 'meta.get.graql'
    patterns: [
      { include: '#comment' }
      { include: '#variable' }
    ]
  }
  {
    match: '[!<>]?=|<>|<|>'
    name: 'keyword.operator.comparison.graql'
  }
  {
    match: '-|\\+|/'
    name: 'keyword.operator.math.graql'
  }
]

repository:
  define_sub:
    patterns: [
      {
        # ... sub <concept> [,]? ...
        begin: '\\bsub\\b'
        beginCaptures:
          0: name: 'keyword.control.sub.graql'
        end: '(?=has|isa|sub|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.sub.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier_build_in' }
          { include: '#identifier' }
        ]
      }
    ]
  insert_statement:
    patterns: [
      {
        # Insert statement
        begin: '''(?x)
            (?:
              ([$][a-zA-Z0-9\\-_]+)\\b |     # Variable
              ((?=isa|has|[(]))              # Nothing
            )
          '''
        beginCaptures:
          1: name: 'variable.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.insert.graql'
        patterns: [
          { include: '#comment' }
          { include: '#relationship' }
          { include: '#insert_isa' }
          { include: '#insert_has' }
        ]
      }
    ]
  insert_isa:
    patterns: [
      {
        # ... isa <concept> [,]? ...
        begin: '\\bisa\\b'
        beginCaptures:
          0: name: 'keyword.control.isa.graql'
        end: '(?=has|isa|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.isa.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier_build_in' }
          { include: '#identifier' }
        ]
      }
    ]
  insert_has:
    patterns: [
      {
        # ... has <attribute> [==]? (date|long|double|string|boolean) [,]? ...
        begin: '''(?x)
          \\b(has)\\b\\s*
          \\b([a-zA-Z0-9\\-_]+)\\b
          \\b(==)?\\b
        '''
        beginCaptures:
          1: name: 'keyword.control.has.graql'
          2: name: 'entity.type.name.graql'
          3: name: 'punctuation.definition.equals.graql'
        end: '((?=has|isa|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.has.graql'
        patterns: [
          { include: '#comment' }
          { include: '#date' }
          { include: '#string' }
          { include: '#boolean' }
          { include: '#numeric' }
        ]
      }
    ]
  match_statement:
    patterns: [
      {
        # Match statement
        begin: '''(?x)
            (?:
              ([$][a-zA-Z0-9\\-_]+)\\b |           # Variable
              ([a-zA-Z0-9\\-_]+)\\b |              # Identifier
              ((?=sub|isa|plays|relates|has|[(]))  # Nothing
            )
          '''
        beginCaptures:
          1: name: 'variable.graql'
          2: name: 'entity.type.name.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.match.graql'
        patterns: [
          { include: '#comment' }
          { include: '#relationship' }
          { include: '#match_sub' }
          { include: '#match_isa' }
          { include: '#match_plays' }
          { include: '#match_relates' }
          { include: '#match_has' }
        ]
      }
    ]
  match_sub:
    patterns: [
      {
        # ... sub <concept> [,]? ...
        begin: '\\bsub\\b'
        beginCaptures:
          0: name: 'keyword.control.sub.graql'
        end: '(?=has|isa|sub|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.sub.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier_build_in' }
          { include: '#identifier' }
          { include: '#variable' }
        ]
      }
    ]
  match_isa:
    patterns: [
      {
        # ... isa <concept> [,]? ...
        begin: '\\bisa\\b'
        beginCaptures:
          0: name: 'keyword.control.isa.graql'
        end: '(?=has|isa|sub|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.isa.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier_build_in' }
          { include: '#identifier' }
          { include: '#variable' }
        ]
      }
    ]
  match_plays:
    patterns: [
      {
        # ... plays <concept> [,]? ...
        begin: '\\bplays\\b'
        beginCaptures:
          0: name: 'keyword.control.plays.graql'
        end: '(?=has|isa|sub|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.plays.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier' }
          { include: '#variable_build_in' }
          { include: '#variable' }
        ]
      }
    ]
  match_relates:
    patterns: [
      {
        # ... relates <role> [,]? ...
        begin: '\\brelates\\b'
        beginCaptures:
          0: name: 'keyword.control.relates.graql'
        end: '(?=has|isa|sub|;|\\()|(,)'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.plays.graql'
        patterns: [
          { include: '#comment' }
          { include: '#string' }
          { include: '#identifier' }
          { include: '#variable' }
        ]
      }
    ]
  match_has:
    patterns: [
      {
        # ... has <attribute> [==]? (date|long|double|string|boolean) [,]? ...
        # TODO: Add comparison keywords
        begin: '''(?x)
          \\b(has)\\b\\s*
          \\b([a-zA-Z0-9\\-_]+)\\b
          \\b(==)?\\b
        '''
        beginCaptures:
          1: name: 'keyword.control.has.graql'
          2: name: 'entity.type.name.graql'
          3: name: 'punctuation.definition.equals.graql'
        end: '((?=has|isa|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.has.graql'
        patterns: [
          { include: '#comment' }
          { include: '#date' }
          { include: '#string' }
          { include: '#boolean' }
          { include: '#numeric' }
        ]
      }
    ]
  relationship:
    patterns: [
      {
        # ... (role1: $id1, role2: $id2) [,]? ...
        begin: '[(]'
        beginCaptures:
          1: name: 'punctuation.definition.start.graql'
        end: '[)]'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          {
            match: '([a-zA-Z0-9\\-_]+s*[\\:])\\s*([$][a-zA-Z0-9\\-_]+)'
            captures:
              1: name: 'support.function.any-method.relationship.graql'
              2: name: 'variable.graql'
          }
          { include: '#variable' }
        ]
      }
    ]
  comment:
    patterns: [
      {
        begin: '#'
        end: '$'
        name: 'comment.line.double-dash.graql'
      }
    ]
  boolean:
    patterns: [
      {
        match: '\\b(true|false)\\b'
        name: 'constant.boolean.graql'
      }
    ]
  date:
    patterns: [
      {
        match: '\\b\\d{4,}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}(?::(?:\\d{2}(?:\\.\\d+)?))?\\b'
        name: 'constant.date.graql'
      }
    ]
  numeric:
    patterns: [
      {
        match: '([\\-\\+]?(?:(?:\\d+\\.\\d+)|(?:\\d+[i]?)))\\b'
        name: 'constant.numeric.graql'
      }
    ]
  variable:
    patterns: [
      {
        match: '[$][a-zA-Z0-9\\-_]+\\b'
        name: 'variable.graql'
      }
    ]
  variable_build_in:
    patterns: [
      {
        match: '@[a-zA-Z0-9\\-_]+\\b'
        name: 'variable.build-in.graql'
      }
    ]
  identifier_build_in:
    patterns: [
      {
        match: '\\bentity\\b'
        name: 'support.type.entity.graql'
      }
      {
        match: '\\brelationship\\b'
        name: 'support.type.relationship.graql'
      }
      {
        match: '\\brole\\b'
        name: 'support.type.role.graql'
      }
      {
        match: '\\battribute\\b'
        name: 'support.type.attribute.graql'
      }
      {
        match: '\\brule\\b'
        name: 'support.type.rule.graql'
      }
    ]
  identifier:
    patterns: [
      {
        match: '\\b[a-zA-Z0-9\\-_]+\\b'
        name: 'entity.type.name.graql'
      }
    ]
  identifier_illegal:
    patterns: [
      {
        match: '\\b[a-zA-Z0-9\\-_]+\\b'
        name: 'invalid.illegal.identifier.graql'
      }
    ]
  datatypes_build_in:
    patterns: [
      {
        match: '\\blong\\b'
        name: 'storage.type.datatype.long.graql'
      }
      {
        match: '\\bdouble\\b'
        name: 'storage.type.datatype.double.graql'
      }
      {
        match: '\\bstring\\b'
        name: 'storage.type.datatype.strings.graql'
      }
      {
        match: '\\bboolean\\b'
        name: 'storage.type.datatype.boolean.graql'
      }
      {
        match: '\\bdate\\b'
        name: 'storage.type.datatype.date.graql'
      }
    ]
  regexp:
    patterns: [
      {
        # Regexp string
        match: '(/)[^\\\\]*(/)'
        name: 'string.regexp.graql'
        captures:
          1: name: 'punctuation.definition.regexp.begin.graql'
          2: name: 'punctuation.definition.regexp.end.graql'
      }
    ]
  string:
    patterns: [
      {
        # Single-quoted string
        match: '(\')[^\'\\\\]*(\')'
        name: 'string.quoted.single.graql'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
      }
      {
        begin: '\''
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '\''
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.single.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
      {
        # Double-quoted string
        match: '(")[^"\\\\]*(")'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
        name: 'string.quoted.double.graql'
      }
      {
        begin: '"'
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '"'
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.double.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
    ]
  'string_escape':
    'patterns': [
      {
        'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
        'name': 'invalid.illegal.unicode-escape.js'
      }
      {
        'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
        'name': 'constant.character.escape.js'
        'captures':
          '1':
            'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.js'
          '2':
            'patterns': [
              {
                # Max codepoint: \u{10FFFF}
                'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
                'name': 'invalid.illegal.unicode-escape.js'
              }
            ]
          '3':
            'name': 'punctuation.definition.unicode-escape.end.bracket.curly.js'
      }
      {
        'match': '\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.js'
      }
    ]
