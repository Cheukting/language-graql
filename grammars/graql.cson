# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.gql' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'Graql' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'gql'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [
  { include: '#comments' }
  {
    # define block
    begin: '\\bdefine\\b'
    beginCaptures:
      0: name: 'keyword.control.define.graql'
    end: '(?=insert|define|undefine|match|get)'
    name: 'meta.define.graql'
    patterns: [
      { include: '#comments' }
      {
        # concept declaration
        begin: '\\b([a-zA-Z0-9\\-_]+)\\b'
        beginCaptures:
          0: name: 'entity.type.name.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          {
            # ... sub <concept> [,]? ...
            begin: '\\bsub\\b'
            beginCaptures:
              0: name: 'keyword.control.sub.graql'
            end: '((?=has|sub|plays|relates|when|then|;)|(,))'
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.attribute.graql'
            patterns: [
              { include: '#comments' }
              { include: '#identifiers_build_in' }
              { include: '#identifiers' }
            ]
          }
          {
            # ... plays <role> [,]? ...
            # ... has <attribute> [,]? ...
            # ... relates <role> [,]? ...
            begin: '\\b(plays)|(has)|(relates)\\b'
            beginCaptures:
              1: name: 'keyword.control.plays.graql'
              2: name: 'keyword.control.has.graql'
              3: name: 'keyword.control.relates.graql'
            end: '((?=has|sub|plays|relates|when|then|;)|(,))'
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.attribute.graql'
            patterns: [
              { include: '#comments' }
              { include: '#identifiers' }
            ]
          }
          {
            # ... datatype (long|double|string|boolean|date) [,]? ...
            begin: '\\bdatatype\\b'
            beginCaptures:
              0: name: 'keyword.control.datatype.graql'
            end: '((?=has|sub|plays|relates|when|then|;)|(,))'
            endCaptures:
              0: name: 'punctuation.definition.separator.graql'
            name: 'meta.attribute.graql'
            patterns: [
              { include: '#comments' }
              { include: '#datatypes_build_in' }
              { include: '#identifiers_illegal' }
            ]
          }
          {
            # ... is-abstract [,]? ...
            match: '\\b(is-abstract)\\b\\s*(\\,)?'
            captures:
              1: name: 'keyword.control.abstract.graql'
              2: name: 'punctuation.definition.separator.graql'
          }
          {
            # ... when { ... } ...
            begin: '\\bwhen\\b'
            beginCaptures:
              0: name: 'keyword.control.when.graql'
            end: '(?<=})'
            name: 'meta.rule.preconditions.graql'
            patterns: [
              {
                # ... { ... } ...
                begin: '{'
                beginCaptures:
                  0: name: 'punctuation.definition.preconditions.start.graql'
                end: '}'
                endCaptures:
                  0: name: 'punctuation.definition.preconditions.end.graql'
                name: 'meta.rule.preconditions.block.graql'
                patterns: [
                  { include: '#comments' }
                  {
                    # named insert
                    begin: '([$][a-zA-Z0-9\\-_]+)\\b'
                    beginCaptures:
                      1: name: 'variable.graql'
                    end: ';'
                    endCaptures:
                      0: name: 'punctuation.definition.end.graql'
                    name: 'meta.entity.graql'
                    patterns: [
                      { include: '#comments' }
                      { include: '#relationship' }
                      { include: '#classification_insert' }
                      { include: '#composition_insert' }
                    ]
                  }
                  {
                    # anonymus insert
                    begin: '(?=isa|has|[(])'
                    end: ';'
                    endCaptures:
                      0: name: 'punctuation.definition.end.graql'
                    name: 'meta.entity.graql'
                    patterns: [
                      { include: '#comments' }
                      { include: '#relationship' }
                      { include: '#classification_insert' }
                      { include: '#composition_insert' }
                    ]
                  }
                ]
              }
            ]
          }
          {
            # ... then { ... } ...
            begin: '\\bthen\\b'
            beginCaptures:
              0: name: 'keyword.control.then.graql'
            end: '(?<=})'
            name: 'meta.rule.postconditions.graql'
            patterns: [
              {
                # ... { ... } ...
                begin: '{'
                beginCaptures:
                  0: name: 'punctuation.definition.postconditions.start.graql'
                end: '}'
                endCaptures:
                  0: name: 'punctuation.definition.postconditions.end.graql'
                name: 'meta.rule.postconditions.block.graql'
                patterns: [
                  { include: '#comments' }
                  {
                    # named insert
                    begin: '([$][a-zA-Z0-9\\-_]+)\\b'
                    beginCaptures:
                      1: name: 'variable.graql'
                    end: ';'
                    endCaptures:
                      0: name: 'punctuation.definition.end.graql'
                    name: 'meta.entity.graql'
                    patterns: [
                      { include: '#comments' }
                      { include: '#relationship' }
                      { include: '#classification_insert' }
                      { include: '#composition_insert' }
                    ]
                  }
                  {
                    # anonymus insert
                    begin: '(?=isa|has|[(])'
                    end: ';'
                    endCaptures:
                      0: name: 'punctuation.definition.end.graql'
                    name: 'meta.entity.graql'
                    patterns: [
                      { include: '#comments' }
                      { include: '#relationship' }
                      { include: '#classification_insert' }
                      { include: '#composition_insert' }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  }
  {
    # insert block
    begin: '\\binsert\\b'
    beginCaptures:
      0: name: 'keyword.control.insert.graql'
    end: '(?=insert|define|undefine|match|get)'
    name: 'meta.insert.graql'
    patterns: [
      { include: '#comments' }
      {
        # named insert
        begin: '([$][a-zA-Z0-9\\-_]+)\\b'
        beginCaptures:
          1: name: 'variable.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#relationship' }
          { include: '#classification_insert' }
          { include: '#composition_insert' }
        ]
      }
      {
        # anonymus insert
        begin: '(?=isa|has|[(])'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#relationship' }
          { include: '#classification_insert' }
          { include: '#composition_insert' }
        ]
      }
    ]
  }
  {
    # match block
    begin: '\\bmatch\\b'
    beginCaptures:
      0: name: 'keyword.control.insert.graql'
    end: '(?=insert|define|undefine|match|get)'
    name: 'meta.match.graql'
    patterns: [
      { include: '#comments' }
      {
        # named match
        begin: '([$][a-zA-Z0-9\\-_]+)\\b'
        beginCaptures:
          1: name: 'variable.graql'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#relationship' }
          { include: '#classification_match' }
          { include: '#composition_insert' }
          { include: '#specialization_insert' }
        ]
      }
      {
        # anonymus match
        begin: '(?=isa|has|[(])'
        end: ';'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#relationship' }
          { include: '#classification_match' }
          { include: '#composition_insert' }
          { include: '#specialization_insert' }
        ]
      }
    ]
  }
  {
    match: '\\b(get)\\s*;'
    captures:
      1: name: 'keyword.control.get.graql'
  }
  {
    match: '[!<>]?=|<>|<|>'
    name: 'keyword.operator.comparison.graql'
  }
  {
    match: '-|\\+|/'
    name: 'keyword.operator.math.graql'
  }
  {
    match: '\\bmatch\\b'
    name: 'keyword.control.match.graql'
  }
]
repository:
  identifiers_build_in:
    patterns: [
      {
        match: '\\bentity\\b'
        name: 'support.type.entity.graql'
      }
      {
        match: '\\brelationship\\b'
        name: 'support.type.relationship.graql'
      }
      {
        match: '\\brole\\b'
        name: 'support.type.role.graql'
      }
      {
        match: '\\battribute\\b'
        name: 'support.type.attribute.graql'
      }
      {
        match: '\\brule\\b'
        name: 'support.type.rule.graql'
      }
    ]
  identifiers:
    patterns: [
      {
        match: '\\b([a-zA-Z0-9\\-_]+)\\b'
        name: 'entity.type.name.graql'
      }
    ]
  identifiers_illegal:
    patterns: [
      {
        match: '\\b([a-zA-Z0-9\\-_]+)\\b'
        name: 'invalid.illegal.identifier.graql'
      }
    ]
  datatypes_build_in:
    patterns: [
      {
        match: '\\blong\\b'
        name: 'storage.type.datatype.long.graql'
      }
      {
        match: '\\bdouble\\b'
        name: 'storage.type.datatype.double.graql'
      }
      {
        match: '\\bstring\\b'
        name: 'storage.type.datatype.string.graql'
      }
      {
        match: '\\bboolean\\b'
        name: 'storage.type.datatype.boolean.graql'
      }
      {
        match: '\\bdate\\b'
        name: 'storage.type.datatype.date.graql'
      }
    ]
  relationship:
    patterns: [
      {
        # ... (role1: $id1, role2: $id2) [,]? ...
        begin: '[(]'
        beginCaptures:
          1: name: 'punctuation.definition.start.graql'
        end: '[)]'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.entity.graql'
        patterns: [
          {
            match: '([a-zA-Z0-9\\-_]+s*[\\:])\\s*([$][a-zA-Z0-9\\-_]+)'
            captures:
              1: name: 'support.function.any-method.relationship.graql'
              2: name: 'variable.graql'
          }
          { include: '#variable' }
        ]
      }
    ]
  variable:
    patterns: [
      {
        match: '[$][a-zA-Z0-9\\-_]+\\b'
        name: 'variable.graql'
      }
    ]
  classification_match:
    patterns: [
      {
        # ... isa <concept> [,]? ...
        begin: '\\b(isa)\\b'
        beginCaptures:
          0: name: 'keyword.control.isa.graql'
        end: '((?=has|isa|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#identifiers' }
          { include: '#identifiers_build_in' }
          { include: '#variable' }
        ]
      }
    ]
  classification_insert:
    patterns: [
      {
        # ... isa <concept> [,]? ...
        begin: '\\b(isa)\\b'
        beginCaptures:
          0: name: 'keyword.control.isa.graql'
        end: '((?=has|isa|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#identifiers' }
          { include: '#identifiers_build_in' }
        ]
      }
    ]
  specialization_insert:
    patterns: [
      {
        # ... sub <concept> [,]? ...
        begin: '\\b(sub)\\b'
        beginCaptures:
          0: name: 'keyword.control.sub.graql'
        end: '((?=has|isa|sub|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.separator.graql'
        name: 'meta.entity.graql'
        patterns: [
          { include: '#comments' }
          { include: '#identifiers' }
          { include: '#identifiers_build_in' }
        ]
      }
    ]
  composition_insert:
    patterns: [
      {
        # ... has <attribute> [==]? (date|long|double|string|boolean) [,]? ...
        begin: '''(?x)
          \\b(has)\\b\\s*
          \\b([a-zA-Z0-9\\-_]+)\\b
          \\b(==)?\\b
        '''
        beginCaptures:
          1: name: 'keyword.control.has.graql'
          2: name: 'entity.type.name.graql'
          3: name: 'punctuation.definition.equals.graql'
        end: '((?=has|isa|;|[(])|(,))'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.attribute.graql'
        patterns: [
          { include: '#comments' }
          { include: '#dates' }
          { include: '#strings' }
          { include: '#booleans' }
          { include: '#numbers' }
        ]
      }
    ]
  comments:
    patterns: [
      {
        begin: '#'
        end: '$'
        name: 'comment.line.double-dash.graql'
      }
    ]
  booleans:
    patterns: [
      {
        match: '\\b(true|false)\\b'
        name: 'constant.boolean.graql'
      }
    ]
  dates:
    patterns: [
      {
        match: '\\b\\d{4,}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}(?::(?:\\d{2}(?:\\.\\d+)?))?\\b'
        name: 'constant.date.graql'
      }
    ]
  numbers:
    patterns: [
      {
        match: '([\\-\\+]?(?:(?:\\d+\\.\\d+)|(?:\\d+[i]?)))\\b'
        name: 'constant.numeric.graql'
      }
    ]
  strings:
    patterns: [
      {
        # Single-quoted strings
        match: '(\')[^\'\\\\]*(\')'
        name: 'string.quoted.single.graql'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
      }
      {
        begin: '\''
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '\''
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.single.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
      {
        # Double-quoted strings
        match: '(")[^"\\\\]*(")'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
        name: 'string.quoted.double.graql'
      }
      {
        begin: '"'
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '"'
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.double.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
    ]
  'string_escape':
    'patterns': [
      {
        'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
        'name': 'invalid.illegal.unicode-escape.js'
      }
      {
        'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
        'name': 'constant.character.escape.js'
        'captures':
          '1':
            'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.js'
          '2':
            'patterns': [
              {
                # Max codepoint: \u{10FFFF}
                'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
                'name': 'invalid.illegal.unicode-escape.js'
              }
            ]
          '3':
            'name': 'punctuation.definition.unicode-escape.end.bracket.curly.js'
      }
      {
        'match': '\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.js'
      }
    ]
